import numpy as np
import cv2
import time

lk_params = dict(
    winSize=(15, 15), 
    maxLevel=3,  
    criteria=(cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 0.3)
    
)


feature_params = dict(
    maxCorners= 20, 
    qualityLevel= 0.3, 
    minDistance= 10, 
    blockSize= 7  
)

trajectory_len = 90 
detect_interval = 1  
trajectories = []  
frame_idx = 0  

cap = cv2.VideoCapture(1)
while True:
    start = time.time()
    
    ret, frame = cap.read()
    frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    img = frame.copy()  # Copia de frame original para visualización de resultados

    if not ret:
        print("Error al acceder a la cámara")
        break

    if len(trajectories) > 0:
        img0, img1 = prev_gray, frame_gray
        p0 = np.float32([trajectory[-1] for trajectory in trajectories]).reshape(-1, 1, 2)
       

        p1, _st, _err = cv2.calcOpticalFlowPyrLK(img0, img1, p0, None, **lk_params)  # Aplicamos algoritmo Lucas-Kanade
        p0r, _st, _err = cv2.calcOpticalFlowPyrLK(img1, img0, p1, None, **lk_params)  # Volver al frame anterior para validar la precisión
        d = abs(p0 - p0r).reshape(-1, 2).max(-1)  # Se calcula diferencia entre la posición inicial y la regresada, si es menor a 1, se toma como válido
        good = d < 1
        new_trajectories = []

        for trajectory, (x, y), good_flag in zip(trajectories, p1.reshape(-1, 2), good):
            if not good_flag:
                continue

            trajectory.append((x, y))
            if len(trajectory) > trajectory_len:
                del trajectory[0]
            new_trajectories.append(trajectory)
            cv2.circle(img, (int(x), int(y)), 2, (0, 0, 255), -1)

        trajectories = new_trajectories
        cv2.polylines(img, [np.int32(trajectory) for trajectory in trajectories], False, (0, 255, 0))

    if frame_idx % detect_interval == 0:  # Crear máscara en blanco
        mask = np.zeros_like(frame_gray)
        mask[:] = 255

        for x, y in [np.int32(trajectory[-1]) for trajectory in trajectories]:
            cv2.circle(mask, (x, y), 5, 0, -1)  # Dibuja círculo negro en cada punto
        
        p = cv2.goodFeaturesToTrack(frame_gray, mask=mask, **feature_params)

        if p is not None:
            for x, y in np.float32(p).reshape(-1, 2):
                trajectories.append([(x, y)])

    frame_idx += 1
    prev_gray = frame_gray

    end = time.time()
    fps = 1 / (end - start)

    # cv2.putText(img, f"{fps:.2f} FPS", (20, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.imshow('Optical Flow', img)
    #cv2.imshow('Mask', mask)

    if cv2.waitKey(10) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
